package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/ObjReponse/web-content-processor-interview/processor"
)

func main() {
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
	config := processor.Config{
		Keywords:       []string{"streaming", "video", "download", "watch", "movie"},
		MaxWorkers:     3,
		RequestTimeout: 10 * time.Second,
		UserAgent:      "WebContentProcessor/1.0",
	}

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
	webProcessor := processor.NewWebProcessor(config)

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã
	input := make(chan processor.Entity, 10)
	output := make(chan processor.ProcessResult, 10)

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		if err := webProcessor.Process(ctx, input, output); err != nil {
			log.Printf("Processor error: %v", err)
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	go func() {
		for result := range output {
			printResult(result)
		}
	}()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	testEntities := []processor.Entity{
		{Link: "https://httpbin.org/html", Title: "Test HTML Page"},
		{Link: "https://httpbin.org/json", Title: "Test JSON Response"},
		{Link: "https://example.com", Title: "Example Domain"},
		{Link: "https://httpstat.us/404", Title: "Not Found Page"},
	}

	fmt.Println("üöÄ Starting web content processor...")
	fmt.Println("üìù Processing test entities...")

	for _, entity := range testEntities {
		select {
		case input <- entity:
			fmt.Printf("üì§ Queued: %s\n", entity.Link)
		case <-ctx.Done():
			break
		}
	}

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
	select {
	case <-sigChan:
		fmt.Println("\nüõë Received shutdown signal...")
	case <-time.After(30 * time.Second):
		fmt.Println("\n‚è∞ Timeout reached...")
	}

	// Graceful shutdown
	fmt.Println("üîÑ Shutting down gracefully...")
	close(input)
	cancel()

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	time.Sleep(2 * time.Second)

	// –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	stats := webProcessor.GetStats()
	fmt.Printf("\nüìä Final Statistics:\n")
	fmt.Printf("   Total Processed: %d\n", stats.TotalProcessed)
	fmt.Printf("   Success Count: %d\n", stats.SuccessCount)
	fmt.Printf("   Error Count: %d\n", stats.ErrorCount)
	fmt.Printf("   Average Process Time: %v\n", stats.AvgProcessTime)

	fmt.Println("‚úÖ Shutdown complete")
}

func printResult(result processor.ProcessResult) {
	fmt.Printf("\nüîç Processing Result for: %s\n", result.Entity.Link)
	fmt.Printf("   Status Code: %d\n", result.StatusCode)
	fmt.Printf("   Content Length: %d bytes\n", len(result.HTMLContent))
	fmt.Printf("   Links Found: %d\n", len(result.Links))
	fmt.Printf("   M3U8 Links: %d\n", len(result.M3U8Links))
	fmt.Printf("   Has Keywords: %v\n", result.HasKeywords)
	fmt.Printf("   Should Continue: %v\n", result.ShouldContinue)
	fmt.Printf("   Process Time: %v\n", result.ProcessTime)

	if result.Error != nil {
		fmt.Printf("   ‚ùå Error: %v\n", result.Error)
	} else {
		fmt.Printf("   ‚úÖ Success\n")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ M3U8 —Å—Å—ã–ª–∫–∏
	if len(result.M3U8Links) > 0 {
		fmt.Printf("   üé• M3U8 Links:\n")
		for _, link := range result.M3U8Links {
			fmt.Printf("      - %s\n", link)
		}
	}
}
